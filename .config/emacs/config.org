#+title: RP's GNU Emacs Config
#+author: Roi Perelman
#+description: RP's personal emacs config
#+property: header-args:emacs-lisp :tangle yes
#+startup: content indent
#+options: toc:2

* TABLE OF CONTENTS :toc:
- [[#general-information][General information]]
  - [[#copy-from-manuals-location-c-u-0-w][Copy from manuals location (C-u 0 w)]]
- [[#early-init][Early Init]]
- [[#initialize-package-manager][Initialize Package Manager]]
- [[#sane-defaults][Sane defaults]]
  - [[#general-settings][General Settings]]
  - [[#line-numbers][line numbers]]
  - [[#frame-management][Frame Management]]
  - [[#no-littering][No Littering]]
  - [[#mac-support][Mac support]]
  - [[#c-g-upgrade][C-g upgrade]]
  - [[#syntax-entry][Syntax entry]]
  - [[#dabbrev][dabbrev]]
  - [[#abbrev][abbrev]]
  - [[#dired][dired]]
  - [[#isearch][Isearch]]
  - [[#ediff][Ediff]]
  - [[#elec-pair-tangle-no][Elec Pair (:tangle no)]]
  - [[#smartparens-tangle-no][smartparens (:tangle no)]]
  - [[#save-place][save-place]]
- [[#general-functions][General Functions]]
- [[#general-keybinding][General Keybinding]]
- [[#general-hooks][General Hooks]]
- [[#general-roip-lib][General roip-lib]]
- [[#syntax][Syntax]]
  - [[#subword][subword]]
- [[#icons][Icons]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#treesitter][Treesitter]]
  - [[#treesit-auto][treesit-auto]]
  - [[#treesit-file-associations-todo-decide-if-to-keep-it-here][treesit file associations (TODO: decide if to keep it here)]]
  - [[#combobulate-tangle-no][Combobulate (:tangle no)]]
- [[#lsp--diagnostics--formatting][Lsp + Diagnostics + Formatting]]
  - [[#prerequisites][Prerequisites]]
  - [[#reformatter-check-apheleia-as-an-alternative][Reformatter (check apheleia as an alternative)]]
  - [[#eglot][Eglot]]
  - [[#lsp-mode][LSP-Mode]]
  - [[#jtsx---better-typescript][jtsx - better typescript]]
  - [[#markdown][Markdown]]
  - [[#org-mode][org mode]]
- [[#git][Git]]
  - [[#magit][Magit]]
  - [[#git-gutter][Git Gutter]]
  - [[#git-blamer][Git Blamer]]
- [[#minibuffer-completions][Minibuffer-Completions]]
  - [[#general][General]]
  - [[#orderless][Orderless]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
- [[#completion-at-point][Completion at point]]
  - [[#corfu][Corfu]]
  - [[#cape-todo-make-sure-understand-this][cape (TODO: make sure understand this)]]
- [[#wgrep][Wgrep]]
- [[#vterm][Vterm]]
- [[#org-mode-1][Org Mode]]
- [[#sudo][Sudo]]
- [[#undo-tree][Undo Tree]]
- [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#rainbow-colors][Rainbow colors]]
- [[#copilot][Copilot]]

* General information

** Copy from manuals location (C-u 0 w)

M-x Info-copy-current-node-name will give the node name.
now we need to wrap the result with (info "return-value")

#+begin_src emacs-lisp :tangle no
(info "(elisp) Abbrevs")
#+end_src

* Early Init

#+begin_src emacs-lisp :tangle early-init.el
;; https://emacs-lsp.github.io/lsp-mode/page/performance/
(setq gc-cons-threshold 200000000) ;; 200mb - updated from 100
(setq read-process-output-max (* 10 1024 1024)) ;; 10mb - updated from 1mb
(setenv "LSP_USE_PLISTS" "true")
#+end_src

* Initialize Package Manager

#+begin_src emacs-lisp
  (require 'package)
  ;; to make sure we are up to date (package-refresh-contents)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

* Sane defaults

** General Settings

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (setq inhibit-startup-screen t)     ; Disable startup message
    (setq ring-bell-function 'ignore)	; Disable annoying noisy bell
    (scroll-bar-mode -1)			; Disable visible scrollbar
    (tool-bar-mode -1)			; Disable the toolbar
    (tooltip-mode -1)			; Disable tooltips
    (menu-bar-mode -1)			; Disable the menu bar
    (set-fringe-mode 5)			; Add some space to lines
    (global-hl-line-mode t)                     ; Highlight current line
    (global-auto-revert-mode t)             ; Automatically update buffers if file changes on disk
    (delete-selection-mode 1)               ; Automatically delete selected text without backspace
    (setq use-short-answers t)		; Use y/n instead of yes/no
    (global-display-fill-column-indicator-mode 1) ; add column indicator
    (set-face-background 'fill-column-indicator "red") ; add color to column indicator
    )
  #+end_src

** line numbers

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (global-display-line-numbers-mode 1)	; Show line numbers
    (column-number-mode 1)                  ; Show column as well as line number in bottom line

    ;; Disable line numbers for some modes
    (dolist (mode '(
                  org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  ))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
    )
#+end_src

** Frame Management

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    ;; make sure we start emacs fullscreen and maximized
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)	; sets initial frame
    (add-to-list 'default-frame-alist '(fullscreen . maximized))    ; sets next frames
    )
#+end_src

** No Littering

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (setq create-lockfiles nil) ; remove lockfiles emacs creates with .#<name> next to the actual file.

    (setq custom-file (concat user-emacs-directory "custom.el")) ; set custom file - so things wont be added in this file
    (load custom-file :no-error-if-file-is-missing)

    ;; set backup directory (Use copying to avoid symlinks)
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
          backup-by-copying t
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          version-control t)
    (setq auto-save-file-name-transforms
          `((".*" ,(concat user-emacs-directory "saves") t)))
    )

  ;; when installing new packages - do not pop confusing warnings
  ;; they are produced by the byte compiler
  (add-to-list 'display-buffer-alist
               '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
                 (display-buffer-no-window)
                 (allow-no-window . t)))
#+end_src

** Mac support

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (when (eq system-type 'darwin)
      ;; Change meta from option to command key
      (setq mac-option-key-is-meta nil
            mac-command-key-is-meta t
            mac-command-modifier 'meta
            mac-option-modifier 'none))

    ;; make it so starting emacs as an app, actually use the shell for env variables
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns x))
      :ensure t
      :config
      (exec-path-from-shell-initialize))
    )
#+end_src

** C-g upgrade

shamelessly taken from [[https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/#h:1e468b2a-9bee-4571-8454-e3f5462d9321][prostesilaos 2024-11-28--basic-emacs-configuration]]

#+begin_src emacs-lisp
  (defun prot/keyboard-quit-dwim ()
    "Do-What-I-Mean behaviour for a general `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
    (interactive)
    (cond
     ((region-active-p)
      (keyboard-quit))
     ((derived-mode-p 'completion-list-mode)
      (delete-completion-window))
     ((> (minibuffer-depth) 0)
      (abort-recursive-edit))
     (t
      (keyboard-quit))))

  (define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)
#+end_src

** Syntax entry

make '-' be considered as part of a word

#+begin_src emacs-lisp
  (modify-syntax-entry ?- "w")
#+end_src

** dabbrev

completions from the buffer

#+begin_src emacs-lisp
;; Use Dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  :config
  (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
  ;; Available since Emacs 29 (Use `dabbrev-ignored-buffer-regexps' on older Emacs)
  (add-to-list 'dabbrev-ignored-buffer-modes 'authinfo-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

** abbrev

completions of my creation

#+begin_src emacs-lisp :tangle no
  ;; `global' (in all modes), `prog-mode' (programming), `text-mode' (prose)
  ;; adding abbrev-mode is buffer specific so this is wrong
  ;; (abbrev-mode 1)
  ;; this is right
  (add-hook 'text-mode-hoom 'abbrev-mode)

  ;; acts like a waterfall - the more specific one gets implemented
  (define-abbrev global-abbrev-table "mytest" "a global abbrev for demo purposes")
  (define-abbrev text-mode-abbrev-table "mytest" "a text-mode abbrev for demo purposes")
  (define-abbrev org-mode-abbrev-table "mytest" "a org-mode abbrev for demo purposes")
  ;; can also run a function that returns a string
  (defun rp-test-my-current-time ()
    (insert (format-time-string "%T")))
  (define-abbrev global-abbrev-table "mytimetest" "" 'rp-test-my-current-time)
  (defun rp-test-greet-person ()
    (insert (format "Hello %s" (read-string "Greet person: "))))
  (define-abbrev global-abbrev-table "mygreettest" "" 'rp-test-greet-person)
  ;; there are some things abbrev doesn't consider as part of words. like :
  ;; we can add it like the following and `:uni' will work
  (abbrev-table-put global-abbrev-table :regexp "\\(?:^\\|[\t\s]+\\)\\(?1:[:_].*\\|.*\\)")
  (define-abbrev global-abbrev-table ":uni" "🦄")
#+end_src

** dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t))
#+end_src

*** dired-subtree

#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))
#+end_src

*** trashed (TODO: doesn't work on mac or both?)

#+begin_src emacs-lisp
  (use-package trashed
    :ensure t
    :commands (trashed)
    :config
    (setq trashed-action-confirmer 'y-or-n-p)
    (setq trashed-use-header-line t)
    (setq trashed-sort-key '("Date deleted" . t))
    (setq trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src

** Isearch

#+begin_src emacs-lisp
  ;; update isearch functionality
  (use-package isearch
    :ensure nil
    :defer t
    :config
    (setq isearch-lazy-count t)	   ; adds a counter eg 4/34 to isearch
    ;; use selection to search (https://www.reddit.com/r/emacs/comments/2amn1v/comment/cixq7zx/)
    (defadvice isearch-mode (around isearch-mode-default-string (forward &optional regexp op-fun recursive-edit word-p) activate)
      (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
          (progn
            (isearch-update-ring (buffer-substring-no-properties (mark) (point)))
            (deactivate-mark)
            ad-do-it
            (if (not forward)
                (isearch-repeat-backward)
              (goto-char (mark))
              (isearch-repeat-forward)))
        ad-do-it))
    ;; push isearch search to project-find-regexp (C-x p g)
    (defun isearch-rp-project ()
      (interactive)
      (let ((query (if isearch-regexp
                     isearch-string
                   (regexp-quote isearch-string))))
        (isearch-update-ring isearch-string isearch-regexp)
        (let (search-nonincremental-instead)
          (ignore-errors (isearch-done t t)))
        (project-find-regexp query)))
    (defun isearch-rp-consult-line ()
      "Invoke `consult-line' from isearch."
      (interactive)
      (let ((query (if isearch-regexp
                     isearch-string
                   (regexp-quote isearch-string))))
        (isearch-update-ring isearch-string isearch-regexp)
        (let (search-nonincremental-instead)
          (ignore-errors (isearch-done t t)))
        (consult-line query)))
    :bind
    (:map isearch-mode-map
        ("M-o" . isearch-occur)
          ("M-p" . isearch-rp-project)
        ("M-." . isearch-forward-thing-at-point)
        ("M-l" . isearch-rp-consult-line)
        ;; ("C-j" . avy-isearch)
        )
    )
#+end_src

** Ediff

#+begin_src emacs-lisp
;; ediff
(use-package ediff
  :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
  :init
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  :config
  (setq ediff-keep-variants nil)
  (setq ediff-make-buffers-readonly-at-startup nil)
  (setq ediff-merge-revisions-with-ancestor t)
  (setq ediff-show-clashes-only t)
  ;; add an option to copy both a and b to c. from https://stackoverflow.com/a/29757750/864684
  (defun ediff-copy-both-to-C ()
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
  (defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
  (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map))
;; (setq ediff-diff-options "")
;; (setq ediff-custom-diff-options "-u")
;; (setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; (setq ediff-split-window-function 'split-window-vertically)
#+end_src
** Elec Pair (:tangle no)

not tangled because i prefer smartparens

#+begin_src emacs-lisp :tangle no
  (use-package elec-pair
    :ensure nil
    :config
    (electric-pair-mode 1))
#+end_src

** smartparens (:tangle no)

#+begin_src emacs-lisp :tangle no
  ;; https://ebzzry.com/en/emacs-pairs/
  ;; TODO: go over smartparens capabalities and choose keybinding
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode))
#+end_src

** save-place

#+begin_src emacs-lisp
  (use-package saveplace
    :ensure nil  ; It's built-in, no need to install
    :defer 3
    :custom
    (save-place-file (expand-file-name ".save-place" user-emacs-directory))
    (save-place-forget-unreadable-files t)
    :init
    (save-place-mode 1))
#+end_src

* General Functions

#+begin_src emacs-lisp
(defun toggle-comment-on-line-or-region ()
  "Toggle comment on the current line or active region."
  (interactive)
  (if (use-region-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position))))
#+end_src

* General Keybinding

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    ;; Set up keybindings for config workflow
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Make esc work like C-g
    (global-set-key (kbd "M-o") 'other-window)              ; `C-x o' is a 2 step key binding. `M-o' is much easier.
    (global-set-key (kbd "C-;") 'toggle-comment-on-line)
    (global-set-key (kbd "M-k") 'kill-current-buffer)

    ;; zoom in and out
    (global-set-key (kbd "C-=") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

    ;; config management
    (global-set-key (kbd "M-s M-r")
      (lambda () (interactive) (load-file "~/.config/emacs/init.el")))
    (global-set-key (kbd "M-s M-c")
      (lambda () (interactive) (find-file "~/.config/emacs/config.org")))
    )
#+end_src

* General Hooks

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace) ; Delete whitespace just when a file is saved.
#+end_src

* General roip-lib

#+begin_src emacs-lisp :tangle no
  (use-package roip-lib
    :load-path "~/.config/emacs/roip/"
    :init
    (defvar roip/inspekto-sync-project-root "~/sinspekto/inspekto/")
    (defvar roip/inspekto-sync-target-root "~/sinspekto/dupspekto/")
    ;; enable inspekto-sync-mode only if in inspekto project
    :hook (find-file . roip/enable-inspekto-sync-if-in-project))
#+end_src

* Syntax

** subword

make us go (or delete) forward and backwards better

#+begin_src emacs-lisp :tangle no
  (use-package syntax-subword
    :ensure t
    :config (global-syntax-subword-mode))
#+end_src

* Icons

M-x nerd-icons-install-fonts

#+begin_src emacs-lisp
   ;; require manual installation nerd-icons-install-fonts
   (use-package nerd-icons :ensure t)
   (use-package nerd-icons-completion
     :ensure t
     :after marginalia
     :config
     (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
   (use-package nerd-icons-corfu
     :ensure t
     :after corfu
     :config
     (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

* Fonts

default is the only one with abosulte height. The rest use floating point as a multiple of defualt

#+begin_src emacs-lisp
  (let ((mono-spaced-font "Fira Code") ; "JetBrains Mono" "Iosevka"
        (proportionately-spaced-font "Sans"))
    (set-face-attribute 'default nil :family mono-spaced-font :height 180)
    (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
    (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))

    ;; (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    ;; (set-face-attribute 'font-lock-function-name-face nil :slant 'italic)
    ;; (set-face-attribute 'font-lock-variable-name-face nil :slant 'italic)
    ;; (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
#+end_src

* Theme

#+begin_src emacs-lisp
  ;; to see colors M-x modus-themes-list-colors-current
  ;; to see original palette C-h f Modus-vivendi-palette
  ;; to see character info under the point - M-x describe-char
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-italic-constructs t)
    (setq modus-themes-bold-constructs t)
    (setq modus-themes-variable-pitch t)
    (setq modus-themes-mixed-fonts t)
    (setq modus-themes-prompts '(bold italic))
    ;; to override the palette
    (setq modus-vivendi-palette-overrides
        '(
          ;; (comment red-intense)
          ))
    :config (load-theme 'modus-vivendi :no-confirm-loading))
#+end_src

* Treesitter

Use M-x treesit-install-language-grammer to install grammers manually in case of issues

** treesit-auto

basically changes all manual setup of treesitter for each language
which includes downloading and setting as default filetypes

#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt) ;; or 'always to auto-install grammars silently
    :config
    (global-treesit-auto-mode))
#+end_src

** treesit file associations (TODO: decide if to keep it here)

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.Dockerfile\\'" . dockerfile-ts-mode))
(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-ts-mode))
;; bitbake
(add-to-list 'auto-mode-alist '("\\.bb\\'" . bash-ts-mode))
(add-to-list 'auto-mode-alist '("\\.bbappend\\'" . bash-ts-mode))
(add-to-list 'auto-mode-alist '("\\.bbclass\\'" . bash-ts-mode))
(add-to-list 'auto-mode-alist '("\\.inc\\'" . bash-ts-mode))
#+end_src

** Combobulate (:tangle no)
#+begin_src emacs-lisp :tangle no
    (use-package combobulate
      :ensure nil
      :vc (:url "https://github.com/mickeynp/combobulate")
  ;;    :load-path "~/.config/emacs/combobulate"
      :custom
      ;; You can customize Combobulate's key prefix here.
      ;; Note that you may have to restart Emacs for this to take effect!
      (combobulate-key-prefix "C-c o")
      :hook ((prog-mode . combobulate-mode)))
#+end_src

* Lsp + Diagnostics + Formatting

** Prerequisites
*** Python Prerequisistes

**** pyright language server

#+begin_src bash :tangle no
npm install -g pyright
#+end_src

**** ruff

#+begin_src bash :tangle no
pip3 install --user ruff
# and in mac I believe u need to add the following in case ruff is missing globally
sudo ln -s ~/Library/Python/3.9/bin/ruff /usr/local/bin/ruff
#+end_src

*** typescript prerequisites

#+begin_src bash :tangle no
npm install -g typescript typscript-language-server
npm install -g vscode-langservers-extracted
#+end_src

*** rust prerequisites

install the latest rust + use it to install language server rust-analyzer

#+begin_src bash :tangle no
curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
rustup component add rust-analyzer
#+end_src

** Reformatter (check apheleia as an alternative)

so each language can use reformatter to add formatting commands

#+begin_src emacs-lisp
  (use-package reformatter :ensure t)
#+end_src

** Eglot

#+begin_src emacs-lisp
(use-package eglot-booster
    :vc (:url "https://github.com/jdtsmith/eglot-booster" :branch "main")
	:after eglot
	:config	(eglot-booster-mode))
#+end_src

*** Python eglot

#+begin_src emacs-lisp
  ;; add ruff linting with flymake
  ;; can add a hook anywhere (add-hook 'python-ts-mode-hook . (flymake-ruff-load))
  (use-package eglot
    :config
    ;; Set up workspace configuration for eglot (Pyright and Python-specific settings)
    ;; TODO: doesn't work for me. Need to setup pyrightconfig
    (setq-default eglot-workspace-configuration
                  `((:pyright . (:disableOrganizeImports t))
                    (:python . (:analysis (:typeCheckingMode  "off"))))))

  (use-package flymake-ruff :ensure t)

  ;; config is not called here
  (use-package python-ts-mode
    :hook (
    	 (python-ts-mode . eglot-ensure)
    	 (python-ts-mode . flymake-ruff-load)
    	 (eglot-managed-mode . (
    				lambda ()
    				(when (derived-mode-p 'python-mode 'python-ts-mode)
    				  (flymake-ruff-load)
    				  (flymake-start)))))
    :mode (("\\.py\\'" . python-ts-mode))
    :init
    (require 'reformatter)
    (defcustom ruff-command "ruff" "Ruff command to use for formatting." :type 'string :group 'ruff-format)
    (reformatter-define ruff-fix
      :program ruff-command
      :args (list "check" "--fix" "--stdin-filename" (or (buffer-file-name) input-file))
      :lighter " RuffFix"
      :group 'ruff-format)
    (reformatter-define ruff-isort
      :program ruff-command
      :args (list "check" "--select=I" "--fix" "--stdin-filename" (or (buffer-file-name) input-file))
      :lighter " RuffIsort"
      :group 'ruff-format)
    (reformatter-define ruff-format
      :program ruff-command
      :args (list "format" "--stdin-filename" (or (buffer-file-name) input-file))
      :lighter " RuffFmt"
      :group 'ruff-format)
    (defun ruff-fix-isort-format-buffer ()
      "Runs all ruff reformatters: ruff-fix, ruff-isort, and ruff-format."
      (interactive)
      (call-interactively 'ruff-fix-buffer)
      (call-interactively 'ruff-isort-buffer)
      (call-interactively 'ruff-format-buffer))
    )

  (use-package pyvenv
    :ensure t
    :config
    (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    (pyvenv-mode +1)
    ;; Automatically restart LSP after activating new venv
    (add-hook 'pyvenv-post-activate-hooks #'(lambda () (call-interactively #'eglot-reconnect))))
#+end_src

*** typescript eglot

#+begin_src emacs-lisp
  ;; add eslint linting with flymake
  ;; can add a hook anywhere (add-hook 'typescript-ts-mode-hook . (flymake-eslint-enable))
  (use-package flymake-eslint
    :ensure t
    :config
    (setq flymake-eslint-prefer-json-diagnostics t)
    (setq flymake-eslint-executable "eslint_d"))

  (use-package typescript-ts-mode
    :hook (
    	 (typescript-ts-mode . eglot-ensure)
    	 (typescript-ts-mode . flymake-eslint-enable)
    	 (tsx-ts-mode . eglot-ensure)
    	 (tsx-ts-mode . flymake-eslint-enable)
    	 (eglot-managed-mode . (
    				lambda ()
    				(when (derived-mode-p 'typescript-ts-mode 'tsx-ts-mode)
    				  (flymake-eslint-enable)
    				  (flymake-start)))))
    :mode (
     ("\\.ts\\'" . typescript-ts-mode) ("\\.js\\'" . typescript-ts-mode)
     ("\\.tsx\\'" . tsx-ts-mode) ("\\.jsx\\'" . tsx-ts-mode))
    :config
    (require 'reformatter)
    (defcustom eslint-command "eslint_d" "ESLint command to use for formatting." :type 'string :group 'eslint-fix)
    (reformatter-define eslint-fix
      :program eslint-command
      :args (list "--fix-to-stdout" "--no-warn-ignored" "--stdin" "--stdin-filename" (or (buffer-file-name) input file))
      :lighter " ESLintFix"
      :group 'eslint-fix))
#+end_src

*** rust eglot
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :mode (("\\.rs\\'" . rust-ts-mode))
    :hook ((rust-ts-mode . eglot-ensure)))
#+end_src
** LSP-Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :custom
    ;; (lsp-prefer-flymake t) ;; We prefer flymake if available
    (lsp-diagnostics-provider :flycheck)
    (lsp-diagnostic-package :flycheck)
    (lsp-enable-snippet nil) ;; Optional: disable snippets
    (lsp-completion-provider :none) ;; stop using company as #'completion-at-point
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-log-io nil) ;; Debug: can set to t if you want to debug LSP issues
    :init
    (setq lsp-use-plists t)
    ;; https://github.com/blahgeek/emacs-lsp-booster
    (defun lsp-booster--advice-json-parse (old-fn &rest args)
      "Try to parse bytecode instead of json."
      (or
       (when (equal (following-char) ?#)
         (let ((bytecode (read (current-buffer))))
  	 (when (byte-code-function-p bytecode)
             (funcall bytecode))))
       (apply old-fn args)))
    (advice-add (if (progn (require 'json)
  			 (fboundp 'json-parse-buffer))
                    'json-parse-buffer
  		'json-read)
                :around
                #'lsp-booster--advice-json-parse)

    (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
      "Prepend emacs-lsp-booster command to lsp CMD."
      (let ((orig-result (funcall old-fn cmd test?)))
        (if (and (not test?)                             ;; for check lsp-server-present?
                 (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
                 lsp-use-plists
                 (not (functionp 'json-rpc-connection))  ;; native json-rpc
                 (executable-find "emacs-lsp-booster"))
            (progn
              (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
                (setcar orig-result command-from-exec-path))
              (message "Using emacs-lsp-booster for %s!" orig-result)
              (cons "emacs-lsp-booster" orig-result))
  	orig-result)))
    (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))
#+end_src

*** Flycheck Diagnostics

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . flycheck-mode))

  (use-package consult-flycheck :ensure t :after consult)
#+end_src

*** python lsp-mode

#+begin_src emacs-lisp
  ;; Pyright LSP setup. Needs require 'lsp-pyright somewhere before loading lsp
  (use-package lsp-pyright
    :ensure t
    :after lsp-mode
    :custom
    (lsp-pyright-type-checking-mode "off") ;; or "basic" / "strict"
    (lsp-pyright-auto-import-completions t)
    (lsp-pyright-disable-organize-imports t))

  ;; Python major mode
  (use-package python-ts-mode
    :hook ((python-ts-mode . (lambda()
    			     (require 'lsp-pyright)
    			     ;; we need for another package as its already included in lsp-mode
    			     (require 'lsp-ruff)
    			     (lsp-deferred))))
    :mode (("\\.py\\'" . python-ts-mode)))

  ;; Pyvenv for managing Python virtualenvs
  (use-package pyvenv
    :ensure t
    :config
    (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    (pyvenv-mode 1)
    ;; Automatically restart LSP after activating new venv
    (add-hook 'pyvenv-post-activate-hooks (lambda () (when (bound-and-true-p lsp-mode) (lsp-restart-workspace)))))
#+end_src

*** typescript lsp-mode

#+begin_src emacs-lisp
  (use-package lsp-eslint
    :demand t
    :after lsp-mode
    :init
    (setq lsp-eslint-server-command '("vscode-eslint-language-server" "--stdio"))
    :config
    (require 'lsp-eslint))

  ;; Python major mode
  (use-package typescript-ts-mode
    :hook (((tsx-ts-mode typescript-ts-mode js-ts-mode) . lsp-deferred))
    :mode (("\\.tsx\\'" . tsx-ts-mode)
           ("\\.js\\'"  . typescript-ts-mode)
           ("\\.mjs\\'" . typescript-ts-mode)
           ("\\.mts\\'" . typescript-ts-mode)
           ("\\.cjs\\'" . typescript-ts-mode)
           ("\\.ts\\'"  . typescript-ts-mode)
           ("\\.jsx\\'" . tsx-ts-mode)))
#+end_src


** jtsx - better typescript

#+begin_src emacs-lisp
(use-package jtsx
  :ensure t
  :mode (("\\.jsx?\\'" . jtsx-jsx-mode)
         ("\\.tsx\\'" . jtsx-tsx-mode)
         ("\\.ts\\'" . jtsx-typescript-mode))
  :commands jtsx-install-treesit-language
  :hook ((jtsx-jsx-mode . hs-minor-mode)
         (jtsx-tsx-mode . hs-minor-mode)
         (jtsx-typescript-mode . hs-minor-mode))
  ;; :custom
  ;; Optional customizations
  ;; (js-indent-level 2)
  ;; (typescript-ts-mode-indent-offset 2)
  ;; (jtsx-switch-indent-offset 0)
  ;; (jtsx-indent-statement-block-regarding-standalone-parent nil)
  ;; (jtsx-jsx-element-move-allow-step-out t)
  ;; (jtsx-enable-jsx-electric-closing-element t)
  ;; (jtsx-enable-electric-open-newline-between-jsx-element-tags t)
  ;; (jtsx-enable-jsx-element-tags-auto-sync nil)
  ;; (jtsx-enable-all-syntax-highlighting-features t)
  :config
  (defun jtsx-bind-keys-to-mode-map (mode-map)
    "Bind keys to MODE-MAP."
    (define-key mode-map (kbd "C-c C-j") 'jtsx-jump-jsx-element-tag-dwim)
    (define-key mode-map (kbd "C-c j o") 'jtsx-jump-jsx-opening-tag)
    (define-key mode-map (kbd "C-c j c") 'jtsx-jump-jsx-closing-tag)
    (define-key mode-map (kbd "C-c j r") 'jtsx-rename-jsx-element)
    (define-key mode-map (kbd "C-c <down>") 'jtsx-move-jsx-element-tag-forward)
    (define-key mode-map (kbd "C-c <up>") 'jtsx-move-jsx-element-tag-backward)
    (define-key mode-map (kbd "C-c C-<down>") 'jtsx-move-jsx-element-forward)
    (define-key mode-map (kbd "C-c C-<up>") 'jtsx-move-jsx-element-backward)
    (define-key mode-map (kbd "C-c C-S-<down>") 'jtsx-move-jsx-element-step-in-forward)
    (define-key mode-map (kbd "C-c C-S-<up>") 'jtsx-move-jsx-element-step-in-backward)
    (define-key mode-map (kbd "C-c j w") 'jtsx-wrap-in-jsx-element)
    (define-key mode-map (kbd "C-c j u") 'jtsx-unwrap-jsx)
    (define-key mode-map (kbd "C-c j d n") 'jtsx-delete-jsx-node)
    (define-key mode-map (kbd "C-c j d a") 'jtsx-delete-jsx-attribute)
    (define-key mode-map (kbd "C-c j t") 'jtsx-toggle-jsx-attributes-orientation)
    (define-key mode-map (kbd "C-c j h") 'jtsx-rearrange-jsx-attributes-horizontally)
    (define-key mode-map (kbd "C-c j v") 'jtsx-rearrange-jsx-attributes-vertically))

  (defun jtsx-bind-keys-to-jtsx-jsx-mode-map ()
      (jtsx-bind-keys-to-mode-map jtsx-jsx-mode-map))

  (defun jtsx-bind-keys-to-jtsx-tsx-mode-map ()
      (jtsx-bind-keys-to-mode-map jtsx-tsx-mode-map))

  (add-hook 'jtsx-jsx-mode-hook 'jtsx-bind-keys-to-jtsx-jsx-mode-map)
  (add-hook 'jtsx-tsx-mode-hook 'jtsx-bind-keys-to-jtsx-tsx-mode-map))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode))
  :init (setq markdown-command "/usr/local/bin/multimarkdown"))
#+end_src

** org mode
#+begin_src emacs-lisp
  (use-package org
    :hook
    (org-mode . my/org-mode-setup)
    :config
    (defun my/org-mode-setup ()
      (setq fill-column 100)
      (auto-fill-mode 1)))
#+end_src
* Git

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (
  	 ("C-x g" . magit-status)
  	 ("C-c g g" . magit-status)
  	 ("C-c g B" . magit-blame-addition)
  	 )
    )
#+end_src

** Git Gutter
#+begin_src emacs-lisp
  ;; adds gutter add, change, revert indication
  ;; adds hunk controls
  ;; 1. go to next prev hunk
  ;; 2. show hunk diff
  ;; 3. stage, revert hunk (no unstage hunk)
  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode)
    :bind (
  	 ("M-] h" . git-gutter:next-hunk)
  	 ("M-[ h" . git-gutter:previous-hunk)
  	 ("C-c h s" . git-gutter:stage-hunk)
  	 ("C-c h r" . git-gutter:revert-hunk)
  	 ("C-c h p" . git-gutter:popup-hunk)
  	 )
    :config
    (setq git-gutter:update-interval 0.05)
    (custom-set-variables
     '(git-gutter:window-width 1)
     '(git-gutter:modified-sign " ") ;; two space
     '(git-gutter:added-sign " ")    ;; multiple character is OK
     '(git-gutter:deleted-sign " "))
    )

  (use-package git-gutter-fringe
    :ensure t
    :config
    (fringe-helper-define 'git-gutter-fr:added '(center repeated) ".")
    (fringe-helper-define 'git-gutter-fr:modified '(center repeated) ".")
    (fringe-helper-define 'git-gutter-fr:deleted 'bottom ".")
    )
#+end_src

** Git Blamer

#+begin_src emacs-lisp

  ;; for git blame there is
  ;; 1. magit-blame-addition (fast and adds lines on buffer) (C-c g B)
  ;; 2. vc-annotate (creates a new buffer with git blame on each line (C-x v g)
  ;; 3. blamer-mode which is a git line blame
  (use-package blamer
    :ensure t
    :bind (("C-c g b" . blamer-mode))
    :config
    (setq blamer-idle-time 0.05)
    (setq blamer-author-formatter "%s ")
    (setq blamer-datetime-formatter "[%s]")
    (setq blamer-commit-formatter ": %s")
    (setq blamer-max-commit-message-length 100)
    (setq blamer-min-offset 70))
#+end_src

* Minibuffer-Completions

** General

save minibuffer histories. Vertico uses to put recently selected options at the top.
save recently visited files. Consult uses it to put recent files options at the top.

#+begin_src emacs-lisp
  (use-package savehist :ensure nil :config (savehist-mode))
  (use-package recentf :ensure nil :config (recentf-mode))
#+end_src

** Orderless

Adds out-of-order pattern matching algorithm

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    ;; make sure we use orderless everywhere by setting these
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion))))
    :config
    ;; for corfu - not to slow down the system. use more basic matching style
    (orderless-define-completion-style orderless-literal-only
      (orderless-style-dispatchers nil)
      (orderless-matching-styles '(orderless-literal)))

    (add-hook 'corfu-mode-hook
              (lambda ()
                (setq-local completion-styles '(orderless-literal-only basic)
                            completion-category-overrides nil
                            completion-category-defaults nil))))
#+end_src

** Vertico

Adds a vertical selection manu in minibuffer

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (setq vertico-cycle t)
    (vertico-mode))
#+end_src

** Marginalia

Adds helpful metadata in minibuffer free space

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (setq marginalia-align 'right)
    (marginalia-mode))
#+end_src

** Consult

#+begin_src emacs-lisp
  ;; Gives enhanced completion functions we need to bind
  ;; Gives previews for current item
  ;; binds M-s as opposed to native C-s C-r
  (use-package consult
    :ensure t
    :bind (
           ("M-s M-g" . consult-ripgrep)
           ("M-s M-G" . consult-grep)
           ("M-s M-f" . consult-fd)
           ("M-s M-F" . consult-find)
           ("M-s M-l" . consult-line)
           ("M-s M-b" . consult-buffer)
           ("M-s M-o" . consult-outline)
           ("M-s M-i" . consult-imenu)
           ("M-s M-t" . consult-theme)
           ("M-s M-m" . consult-mark)
           ("M-s M-h" . consult-info))
    :config
    ;; Use `consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default `completion--in-region' function.
    (setq completion-in-region-function
          (lambda (&rest args)
            (apply (if vertico-mode
                       #'consult-completion-in-region
                     #'completion--in-region)
                   args))))

  (use-package consult-project-extra
    :ensure t
    :after consult
    :bind (("C-c p f" . consult-project-extra-find)))
#+end_src

** Embark

#+begin_src emacs-lisp
  ;; adds actions for current item
  (use-package embark
    :ensure t
    :bind (("C-." . embark-act)
           :map minibuffer-local-map
           ("C-c C-c" . embark-collect)
           ("C-c C-e" . embark-export)))

  ;; adds embark actions to consult functions
  (use-package embark-consult
    :ensure t
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Completion at point

** Corfu

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :bind (:map corfu-map ("C-y" . corfu-complete))
    :custom
    (corfu-cycle t)                       ; Allows cycling through candidates
    (corfu-auto t)                        ; Enable auto completion
    (corfu-auto-prefix 2)                 ; Minimum length of prefix for completion
    (corfu-auto-delay 0.1)                ; delay for completion
    (corfu-popupinfo-delay '(0.5 . 0.2))  ; Automatically update info popup after that numver of seconds
    (corfu-preview-current nil)           ; insert previewed candidate
    (corfu-preselect 'prompt)
    (corfu-on-exact-match nil)            ; Don't auto expand tempel snippets
    (corfu-min-width 20)
    :config
    (global-corfu-mode)
    (corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'
    ;; add minibuffer support but not while vertico is running
    (setq global-corfu-minibuffer
    	(lambda ()
    	  (not (or (bound-and-true-p mct--active)
    		   (bound-and-true-p vertico--input)
    		   (eq (current-local-map) read-passwd-map)))))
    ;; eshell and shell support
    (add-hook 'eshell-mode-hook (lambda ()
    				(setq-local corfu-auto nil)
    				(corfu-mode)))
    ;; Sort by input history (no need to modify `corfu-sort-function').
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history))
    ;; TODO: what is that - do i want it?
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))
              nil
              t)
    ;; add M-m to move selection options to minibuffer
    (defun corfu-move-to-minibuffer ()
      (interactive)
      (pcase completion-in-region--data
        (`(,beg ,end ,table ,pred ,extras)
         (let ((completion-extra-properties extras)
               completion-cycle-threshold completion-cycling)
  	 (consult-completion-in-region beg end table pred)))))
    (keymap-set corfu-map "M-m" #'corfu-move-to-minibuffer)
    (add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)
    ;; if we use auto in order not to slow down the system. use more basic matching style
    (defun orderless-fast-dispatch (word index total)
      (and (= index 0) (= total 1) (length< word 4)
    	 (cons 'orderless-literal-prefix word)))

    (orderless-define-completion-style orderless-fast
      (orderless-style-dispatchers '(orderless-fast-dispatch))
      (orderless-matching-styles '(orderless-literal orderless-regexp)))

    (add-hook 'corfu-mode-hook
              (lambda ()
                (setq-local completion-styles '(orderless-fast basic)
                            completion-category-overrides nil
                            completion-category-defaults nil))))
#+end_src

** cape (TODO: make sure understand this)

#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    :ensure t
    ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
    ;; Press C-c p ? to for help.
    :bind ("C-c p" . cape-prefix-map) ;; Alternative key: M-<tab>, M-p, M-+
    ;; Alternatively bind Cape commands individually.
    ;; :bind (("C-c p d" . cape-dabbrev)
    ;;        ("C-c p h" . cape-history)
    ;;        ("C-c p f" . cape-file)
    ;;        ...)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    ;; (add-hook 'completion-at-point-functions #'cape-history)
    ;; ...
  )
#+end_src
* Wgrep

#+begin_src emacs-lisp
  ;; edit the results of a grep search  while inside a `grep-mode' buffer.
  ;; toggle editable mode, make changes, type C-c C-c to confirm | C-c C-k to abort.
  (use-package wgrep
    :ensure t
    :bind ( :map grep-mode-map
            ("e" . wgrep-change-to-wgrep-mode)
            ("C-x C-q" . wgrep-change-to-wgrep-mode)
            ("C-c C-c" . wgrep-finish-edit)))
#+end_src

* Vterm

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :bind (:map vterm-mode-map
              ("C-c C-c" . vterm--self-insert)))
#+end_src

* Org Mode

#+begin_src emacs-lisp
    (use-package toc-org
      :ensure t
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
    (electric-indent-mode -1)
    (require 'org-tempo)

     (add-hook 'org-mode-hook 'org-indent-mode)
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
       )
#+end_src

* Sudo

#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
    (global-set-key (kbd "C-c f u") #'sudo-edit-find-file)
    (global-set-key (kbd "C-c f U") #'sudo-edit))
#+end_src

* Undo Tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-history-directory-alist `(("." . ,(concat user-emacs-directory "undo")))))
#+end_src

* Rainbow Delimiters

#+begin_src emacs-lisp
  ;; adds colors to delimiters
  (use-package rainbow-delimiters
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode)
    :config
    (rainbow-delimiters-mode 1))
#+end_src

* Rainbow colors

#+begin_src emacs-lisp

  ;; adds colors to color indications e.g #fff000
  (use-package rainbow-mode :ensure t)
#+end_src

* Copilot

#+begin_src emacs-lisp
  ;; M-x copilot-install-server
  ;; M-x copilot-login
  (use-package copilot
    :ensure nil
    :vc (:url "https://github.com/copilot-emacs/copilot.el" :branch "main")
    :init
    (use-package dash :ensure t)
    (use-package s :ensure t)
    (use-package editorconfig :ensure t)
    (use-package f :ensure t)
    :bind (:map copilot-completion-map
                ("<tab>" . copilot-accept-completion)
                ("TAB" . copilot-accept-completion))
    :hook (prog-mode . copilot-mode)
    :config
    (setq copilot-max-char -1)
    (add-to-list 'copilot-indentation-alist '(prog-mode 2))
    (add-to-list 'copilot-indentation-alist '(org-mode 2))
    (add-to-list 'copilot-indentation-alist '(text-mode 2))
    (add-to-list 'copilot-indentation-alist '(closure-mode 2))
    (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode 2))
    )
#+end_src
