# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
# TERM variable
#
# This value is used to set the `$TERM` environment variable for
# each instance of Alacritty. If it is not present, alacritty will
# check the local terminfo database and use `alacritty` if it is
# available, otherwise `xterm-256color` is used.
#TERM: alacritty

window:
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 0
    lines: 0
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  # x: 50
  # y: 50
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 5
    y: 5
  # Spread additional padding evenly around the terminal content.
  #dynamic_padding: false
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  decorations: full
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  startup_mode: Maximized

background_opacity: 1.0

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000
  # Scrolling distance multiplier.
  # multiplier: 3

# Colors (One Darker)
colors:
  # Default colors
  primary:
    background: "#1e2127"
    foreground: "#abb2bf"

  # Normal colors
  normal:
    black: "#1e2127"
    red: "#e06c75"
    green: "#98c379"
    yellow: "#d19a66"
    blue: "#61afef"
    magenta: "#c678dd"
    cyan: "#56b6c2"
    white: "#abb2bf"

  # Bright colors
  bright:
    black: "#5c6370"
    red: "#e06c75"
    green: "#98c379"
    yellow: "#d19a66"
    blue: "#61afef"
    magenta: "#c678dd"
    cyan: "#56b6c2"
    white: "#ffffff"

font:
  normal:
    family: "mononoki NF"
    style: Regular
  bold:
    family: "mononoki NF"
    style: Bold
  italic:
    family: "mononoki NF"
    style: Italic
  bold_italic:
    family: "mononoki NF"
    style: Bold Italic
  size: 12.0
#cursor:
#  text: '#000000'
#  cursor: '#ffffff'
#  style: Block
#  unfocused_hollow: true

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
#key_bindings:
#- { key: Paste,                                action: Paste          }
#- { key: Copy,                                 action: Copy           }
#- { key: L,         mods: Control,             action: ClearLogNotice }
#- { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
#- { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
#- { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
#- { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
#- { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

# Vi Mode
#- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
#- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
#- { key: Escape,                      mode: Vi, action: ClearSelection          }
#- { key: I,                           mode: Vi, action: ScrollToBottom          }
#- { key: I,                           mode: Vi, action: ToggleViMode            }
#- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
#- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
#- { key: G,                           mode: Vi, action: ScrollToTop             }
#- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
#- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
#- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
#- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
#- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
#- { key: Y,                           mode: Vi, action: Copy                    }
#- { key: Y,                           mode: Vi, action: ClearSelection          }
#- { key: Copy,                        mode: Vi, action: ClearSelection          }
#- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
#- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
#- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
#- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
#- { key: Return,                      mode: Vi, action: Open                    }
#- { key: K,                           mode: Vi, action: Up                      }
#- { key: J,                           mode: Vi, action: Down                    }
#- { key: H,                           mode: Vi, action: Left                    }
#- { key: L,                           mode: Vi, action: Right                   }
#- { key: Up,                          mode: Vi, action: Up                      }
#- { key: Down,                        mode: Vi, action: Down                    }
#- { key: Left,                        mode: Vi, action: Left                    }
#- { key: Right,                       mode: Vi, action: Right                   }
#- { key: Key0,                        mode: Vi, action: First                   }
#- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
#- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
#- { key: H,      mods: Shift,         mode: Vi, action: High                    }
#- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
#- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
#- { key: B,                           mode: Vi, action: SemanticLeft            }
#- { key: W,                           mode: Vi, action: SemanticRight           }
#- { key: E,                           mode: Vi, action: SemanticRightEnd        }
#- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
#- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
#- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
#- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }

# (Windows, Linux, and BSD only)
#- { key: V,        mods: Control|Shift,           action: Paste            }
#- { key: C,        mods: Control|Shift,           action: Copy             }
#- { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
#- { key: Insert,   mods: Shift,                   action: PasteSelection   }
#- { key: Key0,     mods: Control,                 action: ResetFontSize    }
#- { key: Equals,   mods: Control,                 action: IncreaseFontSize }
#- { key: Add,      mods: Control,                 action: IncreaseFontSize }
#- { key: Subtract, mods: Control,                 action: DecreaseFontSize }
#- { key: Minus,    mods: Control,                 action: DecreaseFontSize }

# (Windows only)
#- { key: Return,   mods: Alt,           action: ToggleFullscreen }

# (macOS only)
#- { key: K,      mods: Command, mode: ~Vi, chars: "\x0c"            }
#- { key: Key0,   mods: Command,            action: ResetFontSize    }
#- { key: Equals, mods: Command,            action: IncreaseFontSize }
#- { key: Add,    mods: Command,            action: IncreaseFontSize }
#- { key: Minus,  mods: Command,            action: DecreaseFontSize }
#- { key: K,      mods: Command,            action: ClearHistory     }
#- { key: V,      mods: Command,            action: Paste            }
#- { key: C,      mods: Command,            action: Copy             }
#- { key: C,      mods: Command, mode: Vi,  action: ClearSelection   }
#- { key: H,      mods: Command,            action: Hide             }
#- { key: M,      mods: Command,            action: Minimize         }
#- { key: Q,      mods: Command,            action: Quit             }
#- { key: W,      mods: Command,            action: Quit             }
#- { key: N,      mods: Command,            action: SpawnNewInstance }
#- { key: F,      mods: Command|Control,    action: ToggleFullscreen }

draw_bold_text_with_bright_colors: true
#  # When set to `true`, selected text will be copied to both the primary and
#  # the selection clipboard. Otherwise, it will only be copied to the selection
#  # clipboard.
#  save_to_clipboard: true

## Live config reload (changes require restart)
#live_config_reload: true

# key_bindings:
# - { key: V, mods: Control|Shift, action: Paste }
# - { key: C, mods: Control|Shift, action: Copy }
# - { key: Key0, mods: Control, action: ResetFontSize }
# - { key: Equals, mods: Control, action: IncreaseFontSize }
# - { key: Add, mods: Control, action: IncreaseFontSize }
# - { key: Subtract, mods: Control, action: DecreaseFontSize }
# - { key: Minus, mods: Control, action: DecreaseFontSize }

